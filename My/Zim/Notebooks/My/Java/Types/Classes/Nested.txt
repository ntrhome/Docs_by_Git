Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-28T08:58:32+03:00

====== Nested ======
Created Пятница 28 июня 2019

**Вложенный класс (работает схоже с вложенным блоком):**
	- существует только внутри родительского;
	- имеет доступ ко всем (и к закрытым) членам родительского;
	- родительский не име­ет доступа к членам вложенного;
	- может быть объявлен локальным в блоке кода;
	- является типом-членом родительского;
	- родительский класс может создать внутри себя объект вложенного класса,
	- может быть определен в любом месте, например внутри метода, в цикле.

**Вложенные классы удобны для обработки событий... (в главе 24, Там же будут представлены и анонимные (т.е. безымянные) внутренние классы.)**

Доступ к public-внутреннему_классу возможен через **ИмяВнешнегоКласса.ИмяВнутреннегоКласса** - так можно объявлять объекты внуттеннего класса во вне внешнего, но только в контексте внешнего.

Объект внутреннего класса может быть возвращен методом внешнего класса. См пример ниже.  

Существуют два вида вложенных классов: 
	- статические - с модифи­катором доступа static,
		- - может непосредственно обра­щаться к статическим членам родительского класса,
		- - может обра­щаться к нестатическим членам родительского класса только посредством объекта;
	- нестатические.

- - - - - - - - - - - - - **пример оперирования внутренним классом:**
class InnerClass{
	public static void main(String[] args) {
		Outer o = new Outer();
		System.out.println(o.f().i  ); //доступ черз Outer к его внутреннему классу Inner - Ок
		System.out.println(o.f().f()); //Ок

		Outer.Inner k = o.f(); //объявка и получение объекта, декларированного внутри Outer и возвращаемого его методом
		System.out.println(k.i  );
		System.out.println(k.f());
		System.out.println(k.getClass().getName());
	}
}

class Outer{
	Inner f() {return new Inner();}
	class Inner{
		int i = 898;
		int f(){return i;}
	}
}
- - - - - - - - - - - - - 

= = = = = = = = = = = = = = = = = = = = = 

- - - - - - - - - - - - - 

- - - - - - - - - - - - - 

= = = = = = = = = = = = = = = = = = = = = 

