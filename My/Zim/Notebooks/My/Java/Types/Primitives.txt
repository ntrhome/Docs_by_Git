Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-17T21:54:19+03:00

====== Primitives ======
Created Понедельник 17 июня 2019

**Восемь примитивных типов данных - embedded types (встроенных в джавку типах):** 

Целые со знаком (байт, диапазон значений):
	**byte	1	-128..127**
	**short	2	-32768..32'767**
	**int	4	-2147483648..2'147'483'647**
	**long	8	-9223372036854775808..9'223'372'036'854'775'807**
Целое без знака (применяется для хранения симвлов в Юникоде/in Unicode, где первые 127 это ASCII, действует арифметика, по сути это unsigned short):
	**char	2	0..65536**
Действительные (стандарт IEEE-754):
	**float	4	1.4е-045..3.4е+ОЗ8**
	**double	8	4.9е-324..1.8е+308**
Логическое (принимает значение или true или false):
	**boolean**

Чтоб задать явно действительное, используют литерал вида '4.0'.

Разработчики Java посчитали целочисленные значения без знака ненужными (кроме char). В частности, они решили, что понятие числовых значений без зна­ка служило в основном для того, чтобы манипулировать с состоянием старшего бита, определяющего знак целочисленного значения. В Java управление состоянием старшего бита осуществляется иначе: с помощью операции "сдвига вправо без знака". Благодаря этому якобы отпадает потребность в целочисленном типе данных без знака. Ну и хорошо.

- - - - - - - - - -

**Примитивные характеризуются:**
**1) явно выраженным диапазоном допустимых значений **
		(в связи с требованием переносимости все примитивные об­ладают строго определенным диапазоном допустимых значений, в отличие от С и С++, например, зна­чения типа int всегда 32-разрядные, независимо от платформы);
**2) и математически строгим поведением.**

- - - - - - - - - -

**Wrapper - классы-обёртки:**
Для того, чтобы иметь возможность оперировать с примитивными как с объектами были придуманы классы-обёртки.
Их названия: Byte, Short, Integer, Long, Float, Double, Boolean, Character.
	Integer x = 1;
	Boolean a = false;
можно и по-старому:
	Integer x = new Integer(1);
	int r = x.intValue();
С такими типами-классами-обертками в какой-то мере можно поступать как с примитивными:
	a = b + c, a>b, ...
а в какой-то - нет:
	a == b - сравнит указатели на объекты

