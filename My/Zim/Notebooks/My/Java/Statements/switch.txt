Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-17T21:20:38+03:00

====== switch ======
Created Понедельник 17 июня 2019

**Классический ****switch-оператор:**

	switch(выражение) // **типа: byte, short, char, int, (с jdk7) String**
	{
		case значение1:
				последовательность_операторов;
				break;
		case значение2:
		case значение3:
					последовательность_операторов;
					break;
		...
		case значениеN:
				последовательность_операторов;
				break;
		default:
				последовательность_операторов;
	}

- - - - - - - - - - - - - - - - -

**Нововведения: **https://habr.com/ru/post/443464/

**С jdk12 может возвращать значение - тогда это не оператор-switch, а выражение-switch (!!!),и он не может содержать ранний возврат (return ...)(независимо от того, используете ли вы стрелку или двоеточие):**
	int t = 1;
	long result1 = switch(t) {
		case 1:
		  	break __20000L__;
	  case 2:
					// ~~return;~~ //error
		  	break __30000L__;
	  default:
		  break __40000L__;
	};
  System.out.println("result1 " + result1);

__Однако используя выражение-switch надо быть аккуратным, следя за тем, чтоб такое выражение ВСЕГДА возвращало значение (либо гарантировано исключив все возможности непопадания проверочного значения ни в один в case - например проверочное значение всегда или 1 или 2 или 3, и, соответственно, для 1 и 2 и 3 есть свои case, либо должен присутствовать default).__

**И можно без break, когда у case вместо ":" указан "->" на один оператор:**
	int t = 2;
	long result = switch(t) {
		case 1 __-> 9000000L;__ // 1 оператор или возвращаемое знач. (как здесь)
	  case 2 __-> { ...; break 60000L;}__  // или блок операторов (при сём break возвращает значение)
	  default __-> f(7000000L);__ // или другое выражение
	};
	System.out.println("result2 " + result2);
	
**И можно несколько проверочных значений через запятую:**
	int t = 2;
	long result = switch(t) {
		case __1, 3, 5, 7, 9__ -> 9000000L;
	  case 2 -> 8000000L;
	  default -> 7000000L;
	};
	System.out.println("result2 " + result2);







