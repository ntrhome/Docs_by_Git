Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-25T16:49:53+03:00

====== String ======
Created вівторок 25 червень 2019

Строковые ресурсы помогают упростить процесс создания локализованных версий. Строковые ресурсы обозначаются тегом <string>.

При разработке первого приложения вы видели, что система создала файл strings.xml, в котором хранились строки для заголовка приложения и выводимого сообщения. Вы можете редактировать данный файл, добавляя новые строковые ресурсы. А также вы можете создать новые файлы, которые будут содержать строковые ресурсы, например, strings2.xml, catnames.xml и т.д. Все эти файлы должны находиться в подкаталоге /res/values. Запомните, имена файлов и их число не важно. Но в большинстве случаев программисты используют для строковых ресурсов стандартное имя strings.xml. Типичный файл выглядит следующим образом.

<?xml version="1.0" encoding="utf-8"?>
<resources>
	<string name="hello">Здравствуй, Мир!</string>
	<string name="app_name">Hello, World</string>
</resources>

Обычно принято хранить строковые ресурсы в файле strings.xml, но вы можете использовать несколько файлов. Главное, чтобы XML-файл имел необходимую структуру и находился в подкаталоге res/values.
Структура файла для строковых ресурсов довольно проста. Имеется корневой узел <resources>, за которым следуют один или несколько дочерних элементов <string>. Каждый элемент <string> в свою очередь имеет свойство name, которое в файле R.java представляет собой атрибут id.
Если вы создаете несколько файлов с ресурсами, то следите за уникальностью создаваемых имен. Не выйдет ничего хорошего, если в двух файлах будет одна и та же переменная app_name.
Запомните, что пробелы в начале и в конце строк обрезаются. Если вам так нужны пробелы, то разместите строку в кавычках и строка будет выводиться как есть. Также можно попробовать использовать код \u0020 вместо пробела.
Такая же проблема и с несколькими пробелами внутри строки - будет выводиться только один пробел (напоминает поведение в html-документе).
Продвинутые приемы работы со строковыми ресурсами
Кроме стандартного использования строковых ресурсов, можно использовать более сложные приёмы. Посмотрим, как определять и использовать строки, написанные на HTML, а также узнаем, как происходит подстановка переменных в строковых ресурсах.
Начнем с того, как определять в ХМL-файлах ресурсов следующие виды строк:
* обычные строки
* строки в кавычках
* НТМL-строки
* заменяемые строки

<resources>
<string  name="simple_string">Простая строка</string>
<string  name="quoted_ string">"Строка в кавычках"</string> 
<string  name="double_quoted_string">\"Строка в двойных кавычках\"</string> 
<string  name="java_format_string">Привет %2$s. Здравствуй %1$s</string> 
<string  name="tagged_string"><b>Рыжик</b> - <i>мой любимый кот</i></string> 
</resources>
Этот ХМL-файл строковых ресурсов должен находиться в подкаталоге res/values. Имя файла выбирается произвольно.
Обратите внимание - строки, находящиеся в кавычках, необходимо либо пропускать, либо помещать еще в одни кавычки. При определении строк также можно использовать стандартные последовательности Jаvа, предназначенные для форматирования строк.
Нельзя использовать символы '&', '<'. Задать эти символы можно используя специальную последовательность < — &lt; или & — &amp;. Если текст содержит html-теги и в нем встречается неразрывный пробел &nbsp;, то его надо заменить на &#160;.
Также можно использовать простые элементы HTML, предназначенные для форматирования, используя теги <b> (полужирный шрифт), <i> (наклонный шрифт), <u> (подчеркнутый шрифт). Вы можете использовать такую НТМL-строку для оформления текста, перед тем как выводить текст на экран.
Каждый вариант использования проиллюстрирован в листинге на примере кода Jаvа.

// Считывание  обычной  строки  и  помещение  ее  в  текстовый  вид 
String simpleString  =  activity.getString (R.string.simple_string); 
textView.setText(simpleString);

// Считывание  строки в кавычках и помещение ее в текстовый вид
String quotedString  =  activity.getString(R.string.quotedstring);
textView.setText(quotedString);

// Считывание строки в двойных кавычках и помещение ее в текстовый  вид
String  doubleQuotedString  =  activity.getString(R.string.double_quoted_string); 
textView.setText(doubleQuotedString);

//  Считывание строки форматирования Java
String javaFormatString  =  activity.getString(R.string.java_format_string);
// Преобразование отформатированной строки при  помощи  данных 
// передаваемых в аргументах
String  substitutedString  =  String.format(javaFormatString, 
"Рыжик",  "Барсик" ); 
// помещение вывода в текстовый  вид 
textView.setText(substitutedString);

//  Считывание  строки  html_string из ресурса и помещение ее в текстовый  вид
String htmlTaggedString  =  activity.getString(R.string.tagged_string);
// Преобразование строки во фрагмент текста,
// который  может  быть  помещен  в  текстовом  виде
// Класс  android.text.Html допускает  рисование строк "html" (не все теги)
Spanned textSpan  =  android.text.Html.fromHtml(htmlTaggedString);
// Поместить  информацию  в  текстовый  вид 
textView.setText(textSpan);
После того, как вы определите строки в виде ресурсов, вы можете вставить их прямо в вид. Например, воспользуемся строкой на HTML в элементе TextView:

<TextView  
	android:layout_width="match_ parent"
	...
	android:text="@string/tagged string" /> 
TextView автоматически определяет, что эта строка написана на HTML, и соответствующим образом обрабатывает форматирование этой строки. Данный пример использовался в статье о создании нового окна.
Можно использовать строковые ресурсы в качестве входящих параметров для метода String.format. Однако данный метод не поддерживает стилизацию текста через теги <b>, <i>, <u>. Что выйти из этого положения, экранируйте HTML-теги следующим образом:

<string name="my_message">&lt;b>Жирный кот&lt;/b></string>
А в коде используйте метод Html.fromHtml для преобразования строки в нужном виде:
String rString = getString(R.string.my_message);
String fString = String.format(rString, "Bla-bla-bla");
CharSequence styledString = Html.fromHtml(fString);
Сложный текст с проблемными символами можно загнать в особый контейнер CDATA, который знаком веб-мастерам.

<string name="long_message">
<![CDATA[
<html>
<body>
<h1>Котик: {{birthDate}}</h1>
<p>Здесь текст о котиках:</p>
<p>{{message}}</p>
<p>Если хотите поговорить об этом, то обращайтесь к <b>Котовскому</b>.</p>
</body>
</html>
]]>
</string>
Существует особый вид ресурсов для строк - Строковые массивы
Есть еще один вид ресурсов, который редко используется, но может пригодиться - plurals, позволяющий задавать строки для разных ситуаций. Например, в английском языке мужчина в единственном числе - man, а во множественном - men.

<plurals name="NumberOfMan">
	<item quantity="one">man</item>
	<item quantity="other">men</item>
</plurals>

<plurals name="cats">
	<item quantity="one">One Cat</item>
	<item quantity="other">%d Cats</item>
</plurals>
Два варианта представлены в виде двух отдельных строк одного числительного. Теперь можно использовать Java-код для применения этого множественного числа при выводе строки с указанием количества.

Resources res = getResources();
String s1 = res.getQuantityString(R.plurals.NumberOfMan, 0, 0);
Первый параметр в методе getQuantityString() - это идентификатор ресурса множественного числа, второй указывает на нужную строку, если значение равно 1, то строка берётся без изменений. Третий параметр - строка, которая подставляется, если второй параметр не равен 1.
В английском языке можно использовать только два значения: one и other. В русском возможны три варианта: one (для 1), few (для 2-4), other (в остальных случаях).
Более подробно об этом типе ресурсов читайте в отдельной статье Ресурсы plurals. Множественное число.
Системные строковые ресурсы
Во многих случаях можно задействовать системные строковые ресурсы - это строки типа OK, Cancel и др. В таких ситуациях используется схожий формат (добавляется слово android):

android:text="@android:string/cancel"
xliff
В строковых ресурсах может применяться особый способ с использованием специального формата xliff. На практике мне не встречался, но вдруг вам пригодится.
Создадим ресурсы следующим образом.

<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:xliff="rn:oasis:names:tc:xliff:document:1.2">
 
	...
	<string name="title">Ваше имя: <xliff:g id="name" example="Александр" >%2$s</xliff:g>, 
		Имя кота: <xliff:g id="cat_name" example="Рыжик" >%1$s</xliff:g> 
	</string>
</resources>
Обратите внимание на пространство имён, определяющий тип документа.
Ресурс title содержит несколько вставок, обрамленных в тег xliff, которые будут заполняться динамически. Каждый тег xliff включает в себя атрибуты id с уникальным именем тега и example с примером его содержимого. Далее заполняем участки с xliff:

TextView textView = findViewById(R.id.textView);
textView.setText(getString(R.string.title, "Васька", "Толя"));
С помощью метода getString() достаем нужный ресурс, где первый параметр — это id ресурса, второй параметр «Васька» заменит плэйсхолдер %1$s, а третий — «Толя» заменит %2$s.
Вы можете использовать любой порядок для вывода текста, который будет зависеть от чисел %1, %2 и т.д. В строке можно использовать несколько раз один и тот же плэйсхолдер, например, %1$s, и он везде будет заполнен одним и тем же параметром — «Васька».
