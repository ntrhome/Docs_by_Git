Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-07-02T10:52:10+03:00

====== Activities ======
Created вівторок 02 липень 2019

https://developer.android.com/guide/components/activities.html?hl=ru
https://developer.android.com/reference/android/app/Activity.html?hl=ru

Активити (активность, операция) - это компонент приложения, обеспечивающий экранный интерфейс с пользователем. 
Включает (как минимум) обрабатывающий класс и XML-макет пользовательского интерфейса, ну и должно быть зарегистрировано в Манифесте.
Обычно окно активити отображается на весь экран, однако может быть меньше, но отображаться поверх других.

Как правило, приложение состоит из набора слабо связанных активити.
"Слабосвязанных" - в том смысле, что активити часто может быть вызвана самостоятельно и служить отправной точкой некой подзадачи.
Обычно одна из активити приложения - "основная", и запускается при старте приложения с касания ярлыка на главном экране или значка в средстве запуска приложений в оболочке Андроид-интерфейса.

Текущая активити может вызвать другую активити. Причем вызваная таким образом активити может быть как компонентой текущего приложения, так и компонентой другого приложения.

- - -
Активити
https://startandroid.ru/ru/uroki/vse-uroki-spiskom/15-urok-6-vidy-layouts-kljuchevye-otlichija-i-svojstva.html
https://developer.android.com/guide/topics/ui/declaring-layout#CommonLayouts
Отдельные компоненты (кнопки, поля ввода, чекбоксы и т.п.), называемые View, размещаются в специальном контейнере, называемом ViewGroup (добавлено слово "обычно", но вроде как "всегда") - модели макет - https://developer.android.com/guide/topics/ui/declaring-layout.html?hl=ru __(!!!)__
Существуют несколько типов ViewGroup, различающихся тем, как они упорядочивают внутри себя компоненты: 
	- **AbsoluteLayout (AL)** - для каждого элемента указывается явная позиция на экране в системе координат для левого верхнего угла компонента (x,y);
	- **LinearLayout (LL)** - выстроит View'ы по горизонтальной (если свойство Orientation = Horizontal) или вертикальной (если Vertical) линии;
	- **RelativeLayout (RL)** - для каждого элемента настраивается его положение относительно других элементов (Виды отношений:
			1) слева, справа, сверху, снизу указанного элемента (layout_toLeftOf, layout_toRightOf, layout_above, layout_below)
			2) выравненным по левому, правому, верхнему, нижнему краю указанного элемента (layout_alignLeft, layout_alignRight, layout_alignTop, layout_alignBottom)
			3) выравненным по левому, правому, верхнему, нижнему краю родителя (layout_alignParentLeft, layout_alignParentRight, layout_alignParentTop, layout_alignParentBottom)
			4) выравненным по центру вертикально, по центру горизонтально, по центру вертикально и горизонтально относительно родителя (layout_centerVertical, layout_centerHorizontal, layout_centerInParent);
			подробно - в [[https://developer.android.com/reference/android/widget/RelativeLayout.LayoutParams.html|хелпе]].
	- **FrameLayout**, 
	- **TableLayout (TL)** - выстроит View'ы в виде таблицы, состоит из строк TableRow (TR), каждая TR в свою очередь содержит View-элементы, формирующие столбцы;
	- **ConstraintLayout** (Constraint - привязка) - для сделанных привязок элемента делает ему относительное размещение как отступ между границами: координата границы элемента = граница лейаута (или граница другого элемента) + смещение (типа: верхняя граница кнопки = нижняя граница TextView + 82). Соответственно в привязке к элементу (например, и по верху и по низу), при его смещении будет смещаться и текущий элемент. Привязки имеют аналогию с пружинами, длинну которых можно менять пропорционально (для противоположных);
	- **Fragment**;
	- **Web View**;
	- **и т.д.**
Несмотря на возможную сложность и вложенность макетов, полная структура представления имеет строго древовидную форму. Причем ветви мозут сменяться (например, для обработки ориентации).
Самый распространенный пример ViewGroup – это Layout.
GroupView можно вкладывать друг в друга. Например можно вложить в один LL два других.
- - -

CTRL+SHIFT+S - сохранить лейаут

- - -



- - -


- - -
- - -

