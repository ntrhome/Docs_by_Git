Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-10T23:05:19+03:00

====== for while ======
Created Понедельник 10 июня 2019

**for, while, do-while**
	- **классика**: fоr(инициализации; условие; итерация) оператор;
			for(int a=l, b=4; а<b; а++, b--) {...} //для управления циклом можно использовать нескольких переменных
			for(;;) {...} //бесконечный цикл
	- ака **foreach**:	for(var элемент: набор);
		Элемент это итерационная переменная, которая перебирает от первого до последнего элемента некий набор - коллекцию или массив:
			int ns[]={1, 2, 3}; for(int n: ns) ...;
		НО! Итерационная переменная доступна только для чтения (присваивание ей нового значения не повлияет на исходный массив).

- - - - - - - - - - - - - - - - - - - -

**"Итерация в многомерных массивах**" - см. [[Types:ARRAY]].

И for each особенно удобен при обращении с коллекциями, определенными в каркасе **Collections Framework**. (позже)

В более общем случае оператор цикла for each позволяет пере­бирать элементы любой коллекции объектов, если эта коллекция удовлетворяет
определенному ряду ограничений, описываемых в главе 19.

- - - - - - - - - - - - - - - - - - - -
**Операторы перехода** (break, continue и return, еще есть обработка исключений, но это - отдельная тема) - бывают полезны внутри цикла:

Оператор перехода применяется для выхода из цикла только в случае, если без него никак. Он ухудшает читабельность и отладочность. Нормальное завершение цикла - по условию, заданному в заголовке цикла.

**break** - if(n == 2) break; //прервать текущий цикл, передав управление следующей за этим циклом команде

Еще break прерывает блок case в switch, и еще есть break с меткой - см. [[break]].




- - - - - - - - - - - - - - - - - - - -




