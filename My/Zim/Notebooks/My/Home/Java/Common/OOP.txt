Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-07-16T16:35:39+03:00

====== OOP ======
Created Tuesday 16 July 2019

**Object-oriented programming (OOP)** is a programming paradigm.
- abstraction;
- encapsulation;
- inheritance;
- polymorphism.



**Bad in language (Егор Бугаенко + West - Object Thinking - 2004):**
ООП - вовсе не данные с их обработкой, а абстрактная сущность (abstraction), которая ака живой организм - контачит с миром, является его частью, не пускает вовнутрь (encapsulation), находится в неком состоянии(!), может иметь детей, которые приобрели новые свойства (inheritance), и дети могут реагировать иным образом даже в давно устоявшемся поведении предков (polymorphism)!
	**- getters, setters** - сущность должна быть глубже абстракионирована, должна работать только с сущностью, и не пускать к своим тонкостям (такие обращения должны пресекаться инкапсуляцией. Сущность конкретизируем 1 раз конструктором, потом оперируем абстракцией);
	- **static** - дань процедурному программированию. Можно и нужно обойтись.
	- **null** - если нечто ожидает объект, а вернуться может null, то повсеместная обработка такой ситуации во-первых - очень и очень загромождает код, а во-вторых ломает ООП. Например если в ситуации:
			 Employee E = DB.getEmployee("Petya");
	прилетает null, тогда в следующем коде все крашится:
			int x = DB.getEmployee("Petya").salary();
	Т.е. при каждом обращении к DB придется писать проверку-обработчик, а уже потом пользоваться методом полученного объекта.
	Альтернативы: порождать ексепшен, возвращать некий спец-объект, сделать обобщенную обертку к своим объектам, в котором либо порождать ексепшен, либо возвращать некий спец-объект, либо сделать что-то еще (?):
			return new Wrap(DB.getEmployee("Petya").salary());


Принципы:
	- пися код мы описывае цель, а не процесс (строим и продаем дом):
		Продаем(Строим(Снабжаем(Земля(Инвестиция))));
	- классы не дергают друг друга за методы, а порождают и слушают события;

