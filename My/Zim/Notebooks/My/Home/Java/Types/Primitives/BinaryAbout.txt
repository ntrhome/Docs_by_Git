Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-16T19:38:57+03:00

====== BinaryAbout ======
Created Воскресенье 16 июня 2019

=================**Java - двоичная форма:**
7654 3210
0010 1010 = 2^5 + 2^3 + 2^1 = 32 + 8 + 2 = 42 (byte)
Все (кроме char) - со знаком.

Отрицательные числа представлены в дополнительном коде, получаемом путем инвертирования (изменения 1 на О, и наоборот) всех двоичных разрядов
исходного значения с последующим добавлением 1 к результату. Например, число 
-42 = ~(42)+1 = ~(0b0010_1010) + 1 = 0b1101_0101 + 1 = 0b1101_0110 = -42.
Положительное число из отрицательного получается абсолютно тем же путем (инвертируем и добавляем 1):
42 = ~(-42)+1 = ~(0b1101_0110) + 1 = 0b0010_1001 + 1 = 0b0010_1010 = 42.
При этом самый левый бит естественным образом становится для числа знаковым разрядом (что не следует забывать пользуясь операторами поразрадного сдвига).

Причина, по которой применяется дополнительный код, становится понятной при рассмотрении процесса перехода церез нуль. Если речь идет о значении типа byte, то нуль представлен значением 0b0000_0000. Обратное его значение, получаемое через инверсию есть 0b11111111, которое по логике есть отрицательный нуль, но чего в математике быть не может. Выходом из этого затруднения и служит дополнительный код, в котором к обратному значению добавляется 1 и получается двоичное значение 0b1_0000_0000. Но старший единичный разряд оказывается сдвинутым влево слишком далеко, чтобы уместиться в byte, и поэтому теряется. Остается общее значение 0: 0b0000_0000. В то же время значение 0b1111_1111 - это двоичный код -1, и т.д.

