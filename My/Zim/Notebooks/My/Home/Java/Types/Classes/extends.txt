Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-29T01:44:15+03:00

====== extends ======
Created Суббота 29 июня 2019

**Наследование (inheritance), extends**

В терминологии джавки:
- суперкласс (superclass) - родительский класс, предок;
- субкласс (subclass) - производный класс, потомок, наследник.

Субкласс наследует все члены суперкласса, добавляя к ним собственные.

Т.о. субкласс - это "специализированный" суперкласс (суперкласс - более обобщенная абстракция сущности, а субкласс - конкретнее и уже, поскольку приобретает специфические знания и умения сущности).

Субкласс наследует суперкласс, и только один (в джавке нет "множественного наследования").

Потомок имеет доступ ко всем членам предка (__тогда зачем нужен protected?__):
		class Superclass 		  { **private** int i=1; }
		class Subclass **extends** Superclass { int k = i + 5; }  

- - - - - - - - - - - - - 

**Ссылке типа суперкласс можно присвоить объект типа субкласс любого уровня в иерархии, при этом для такой ссылки:**
- доступен только тот перечень членов, который актуален для типа ссылки (т.к. суперклассу неизвестны новые члены, появившиеся в субклассах) **- перечень доступных членов определен типом ссылки а не объекта;**
- доступны члены в той версии переопределения, которая актуальна для типа объекта (т.к. объект создавался с учетом переопределений) **- доступнную версию членов определяет тип объекта.**

				//1:228-1 "Следует иметь ввиду, что //**доступные члены класса определяются типом ссылоч­ной переменной, а не типом объекта, на который она ссылается**//. Это означает, что если ссылочной переменной суперкласса присваивается ссылка на объект суб­класса, то доступ предоставляется только к тем частям объекта, которые определены в суперклассе. ... Это становится понятным по зрелом размышлении, ведь суперклассу неизвестно, что именно добавляет в него подкласс."//
				
				1:240-2 "**Вариант переопределенного метода выбирается для выполнения в зависимости от типа объекта, на который делается ссылка, а не типа ссылочной переменной**. Так, если суперкласс содержит метод, переопределяемый в подклассе, то по ссылке на разные типы объектов через ссылочную переменную из суперкласса будут выполняться разные варианты этого метода."

				Из текущего класса через ссылку super можно обратиться к члену его непосредственного суперкласса (например, перекрываемому членом текущего подкласса: suреr.скрытый_член).
				Из текущего класса через метод super(аргументы) можно вызвать конструктор непосредственного суперкласса (применяется для инициации дерева иерархии). Вызов метода super() делается только в первом операторе конструктора субкласса. Сюда же крайне полезна фишка с передачей производного объекта по ссылке суперобъекта - так организовывается, например, копирующий конструктор:
class A           
{int a; A(int i              ){           a=i;} A(A o){          a=o.a;}}
class B extends A 
{int b; B(int i, int j       ){super(i);  b=j;} B(B o){super(o); b=o.b;}}
class C extends B 
{int c; C(int i, int j, int k){super(i,j);c=k;} C(C o){super(o); c=o.c;}}
...
C c = new C(5,6,8);
C copy = new C(c); //o будучи C идет вверх по иерархии как (B o), (A o)

- - - - - - - - - - - - - 
**Доступ:**
__Субкласс имеет такой доступ к членам суперкласса с модификатором:__
__- public 		- свободный (у наследника останется public);__
__- protected 	- свободный (у наследника станет private);__
__- private		- нет доступа.__
								__Член класса, объявленый приватным, недоступен для любого кода вне своего класса, в том числе и для субклассов.__

- - - - - - - - - - - - - 

- - - - - - - - - - - - - 

- - - - - - - - - - - - - 


