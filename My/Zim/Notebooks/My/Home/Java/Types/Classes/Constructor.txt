Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-06-25T23:42:26+03:00

====== Constructor ======
Created Вторник 25 июня 2019

**Конструктор:**

//Вводное (о том, что делается до вызова конструктора, а точнее - о вопросах инициализации)://
		//Не углубляясь, представим так: вызову конструктора объекта предшествует объявление, определение и инициализация членов объекта. По-видимому, сначала такой механизм отрабатывает методы (поскольку методы уже можно вызывать для инициализации полей), а затем слева направо сверху вниз по коду обрабатываются поля. Причем показательна ошибка в ситуации://
			//class A{//
				//int i = j; //error: illegal forward reference//
				//int j=2;//
			//}//
		//Также показательно отсутствие ошибки при некорректной работе в ситуации://
		//class A{//
		//	int i = f(); //нет ошибки, но   вернет 0, при f() каким-то боком видит j, но еще непроинициализированную//
		//	int j = 2;//
		//	int f(){ return j; }//
		//}//
		**Отсюда тезисы:**
			**- инициализация полей в классе выполнянтся до вызова конструктора;**
			**- причем инициализация полей в классе уже может вызывать методы;**
			**- инициализация полей в классе выполнянтся слева направо сверху вниз;**
			**- инициализирующее значение не может непосредственно ссылаться на последующие поля;**
			**- инициализирующее значение может опосредовано через метод ссылаться на последующие поля, но работа будет некорректной, поскольку метод обработает такие поля в непроинициализированном их состоянии (наверное берется начальное значение соответственно типу);**
			**- остался открытым вопрос - как это работает при наследовании и переопределении таких членов;**
		**Вывод: сложную инициализацию (в смысле - инициализацию не литералом-константой) в джавке не применять, и вообще предпочитать инициализацию в конструкторе.**

Конструктор призван достроить объект во время его создания.
Конструктор  - это спецметод, имя совпадает с именем класса, может иметь параметры, без возвращаемого значения.
Если ни один конструктор не определен, джавка создаст дефаултный конструктор - неявный, пустой, без параметров.
Конструктор может быть перегружен.
Конструктор не может быть переопределен (__что о виртуальных, абстрактных ...?__).
В иерархии наследования от класса 1 до N, при создании объекта уровня класса K∈[1..N] будут вызваны поочередно все кострукторы, начиная с 1-го и по K-тый.

**Конструктор каждого класса в иерархии вызывается ВСЕГДА:**
	- или же явно (через super() или super(...)) 
	- или же неявно (дефаултный либо ручной без параметров), 
но обязательно и в порядке, начиная от самого суперового, заканчивая реализуемым субклассом.




