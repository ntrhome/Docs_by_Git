Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-07-17T02:26:11+03:00

====== interface implements ======
Created Wednesday 17 July 2019

**Объявление интерфейса:**

Главное назначение интерфейса - заставить множество классов реализовать, некий единый специфицированный интерфейс с внешним миром (как слот для подключения). Специфицирование осуществляется путем задания в интерфейсе сигнатур перечня методов (контракт интерфейса), методы должны получить public-реализацию в классе.

Технологически интерфейс имеет аналогию с полностью абстрактным классом. 

Главным отличием интерфейса от обычного класса называют его неспособность сохранять данные состояния.
		(Но с сахаром вроде констант, а также стат- и дефаулт-методов такое утверждение несколько спорно, разве что имеется ввиду, что он вообще не порождает никакой сущности выступая только таском для компилятора, и абсолютно все в нем задекларированное реализуется в имплементировавшем классе. С другой стороны, ссылка его типа возможна, а это уже про сущности.)

- - - - - - - -

Доступ (сходно с абстрактным классом):
	- **public** - доступен везде (в этом случае интерфейс должен быть единствен­ным открытым интерфейсом в файле, а его имя должно быть идентично имени файла);
	- **no_modifier** (доступ по умолчанию) - доступен только в своем пакете.

Все имплементируемые методы и переменные неявно объявляются как **рublic**, и должны иметь открытую реализацию в классах.

Может содержать:
	- абстрактные методы (причем abstract указывать не надо, присутствет неявно),
 //= =  остальное - сахар:  = =//
	- статические финальные переменные, которые должны быть инициализированы (причем final и static указывать не надо, они присутствуют неявно, статик-блок для инициализации в интерфейсе недопустим);
	- **default**-методы с реализацией по умолчанию (с JDK 8),
			Не требуют обязательной имплементации в классе, т.о. позволяя расширять интерфейсы не краша весь код, также позволяя контрактить необязательные методы.
	- **static**-методы (с JDK 8),
			Без имплементации в классе.
					interface MyIF { ...
							static int getDefaultNumber() { return 0; }
					... }
			Доступен по определению просто через имя интерфейса.
					int defNum = MyIF.getDefaultNumber();
							В отличие от статических членов класса, которые доступны:
								- и по ссылке на объект класса;
										class A{ static void f(){}; } ...
										A a = new A(); a.f(); 	//так
										(new A()).f(); 			//или так
								- и по имени класса:
										A.f();
							статические методы из интерфейсов не наследуются ни наследующими интерфейсами, ни имплементирующими их классами, и доступны только через имя интерфейса [1:278-1]:
										interface B{ static void q(){}; } ...
										B.q();
	- **private**-методы (с JDK 9).
			Поскольку это закрытый метод интерфейса, то им нельзя воспользоваться в коде за пределами того интерфейса, где он определен. Следовательно такой метод можно вызвать только из метода, реализуемого по умолчанию или другого закрытого метода в том же самом интерфейсе.

**Вложенные интерфейсы:**
	Интерфейс может быть членом класса или другого интерфейса.
	Вложенный интерфейс может быть объявлен как public, private или protected (в отличие от самостоятельного, который может быть или public или no_modofier). Когда вложенный интерфейс используется за пределами объемлющей его области действия, его имя должно быть предварено именем класса или интерфейса, членом которого он является.
		class A{
			public interface NestedInterface{
				boolean isRun();
			}
		}
		class B implements A.NestedInterface { //применить интерфейс, вложенный в другой класс
			public boolean isRun() { return true; }
		}
		class NestedInterfaceDemo {
			public static void main(String args[]} {
				A.NestedInterface nif = new В{};
				if(nif.isRun()) System.out.println("Бежим");
			}
		}
	
**Переменные final в интерфейсах:**
	Применяется для доступа классов, имплементирующих интерфейс, к совместно используемым константам (инициализированных нужным значением), объявленным в этом интерфейсе (могут задавать, например, исходные значения для контрактных методов). Интерфейс может содержать и только константы (без методов).
		interface B{ int NO=1, YES=2; //автоматически становятся static и final }
	"На заметку! Упомянутая методика применения интерфейса для определения общих констант весьма противоречива и представлена ради полноты изложения материала."

- - - - - - - - - 

**Расширение интерфейсов**
	**extends** позволяет одному интерфейсу наследовать другой (аналогично классам) (именно наследовать, поскольку implements - реализовывать).
	
		interface Zoo extends Foo{
				int data(int x);
		}
	Теперь класс, имплементирующий Zoo, должен реализовать методы, законтрактованные и в Foo и в Zoo.


= = = = = = = = = = = = = = = = = = = = 
**Имплементирование интерфейса:**

		[abstract][доступ] class имя_класса [extends суперкласс]
		[implements интерфейс [, интерфейс ... ]] {
				//тело класса
				//[abstract void info();]
		}

Класс может имплементировать больше одного интерфейса (через запятую):
		public interface Foo{
				int INTEGER = 5;
				void info(){ System.out.println("It's metod from interface."); }
				default int Goo(String s){ return s.length(); }
		}
		interface Boo{ int data(int x); }
причем объявленные в них методы могут дублироваться в нескольких интерфейсах.

Методы, реализующие элементы интерфейса, должны быть объявлены как **public**.
	class Loo implements Foo, Boo { public int data(int x) { return x*x; } }

Если класс включает в себя интерфейс, но не реализует некоторый определенный в нем метод, то такой метод должен быть объявлен как **abstract** (следовательно абстрактным объявляем и весь такой класс).

**Default** - методы в классе можно не реализовывать вовсе (и не упоминать, но они будут).

Интерфейс является **типом**, переменная его типа может служить ссылкой на объект (как восходящие ссылки у обычных классов)(версию переопределенного члена определяет уровень объекта). Соответственно, переменная типа ин­терфейс располагает только сведениями о методах, объявленных в том интерфей­се, на который она ссылается (перечень доступных методов определяет тип ссылки). **Этот способ доступа** к множеству объектов разных классов, которые где-то имплементировали общий интерфейс, **представляет отдельный интерес**, т.к. он наглядно использует законтрактованное общение с разными типами.

Поиск исполняемого метода осуществляется динамически во время выполнения, что позволяет создавать клас­сы позднее, чем код, из которого вызываются методы этих классов. Вызывающий код может выполнять диспетчеризацию методов с помощью интерфейса, даже не имея никаких сведений о вызываемом коде. Работают правила восходящей ссылки. Т.о. реализуется 2 полиморфизма:
 - различные реализации интерфейсов в разных классах;
 - переопределение интерфейсов в иерархии наследования.

- - - - - - - - - - - - 
= = = = = = = = = = = = = = = = = = = = 
**Разрешение конфликта имен методов с реализацией по умолчанию при наследовании нескольких интерфейсов:**
Несмотря на все сказанное выше, методы с реализацией по умолчанию предоставляют
отчасти возможности, которые обычно связываются с понятием множественного
наследования. Например, в одном классе можно реализовать два интерфейса. Если
в каждом из этих интерфейсов предоставляются методы с реализацией по умолчанию,
то некоторое поведение наследуется от обоих интерфейсов. Поэтому в какой-то, хотя
и ограниченной, степени эти методы все же померживают множественное наследование.
Нетрудно догадаться, что в подобных случаях может возникнуть конфликт имен.

Допустим, два интерфейса, Alpha и Beta, реализуются в классе MyClass.
Что если в обоих этих интерфейсах предоставляется метод reset (), объявляемый
с реализацией по умолчанию? Какой из вариантов этого метода будет выбран
в классе MyClass: из интерфейса Alpha или Beta? С другой стороны, рассмотрим
ситуацию, когда интерфейс Beta расширяет интерфейс Alpha. Какой
вариант метода с реализацией по умолчанию используется в этом случае? А что
если в классе MyClass предоставляется собственная реализация этого метода?
Для ответа на эти и другие аналогичные вопросы в Java определен **ряд правил разрешения подобных конфликтов**.

**Во-первых**, во всех подобных случаях приоритет отдается реализации метода
в классе над его реализацией в интерфейсе. Так, если в классе MyClass переопределяется
метод с реализацией по умолчанию reset ( ) , то выбирается его вариант,
реализуемый в классе MyClass. Это происходит даже в том случае, если в классе
MyClass реализуются оба интерфейса, Alpha и Beta. И это означает, что методы
с реализацией по умолчанию переопределяются их конкретной реализацией
в классе MyClass.

**Во-вторых**, если в классе используются два интерфейса с одинаковым реализуемым
по умолчанию методом, но этот метод не переопределяется в данном классе,
то возникает ошибка. Если же в классе MyClass реализуются оба интерфейса,
Alpha и Beta, но метод reset () в нем не переопределяется, то и в этом случае
возникает ошибка.

**В тех случаях**, когда один интерфейс наследует другой и в обоих интерфейсах
определяется общий метод с реализацией по умолчанию, предпочтение отдается
варианту метода из наследующего интерфейса. Так, если интерфейс Beta расширяет
интерфейс Alpha, то используется вариант метода reset () из интерфейса Beta. Впрочем, используя особую форму ключевого слова super, вполне возможно ссылаться на реализацию по умолчанию в наследуемом интерфейсе. Эта общая
форма ключевого слова super выглядит следующим образом:
		имя_интерфейса.suреr.имя_метода()
Так, если из интерфейса Beta требуется обратиться по ссылке к методу с реализацией
по умолчанию reset () в интерфейсе Alpha, то для этого достаточно
воспользоваться следующим оператором:
		Alpha.super.reset();




